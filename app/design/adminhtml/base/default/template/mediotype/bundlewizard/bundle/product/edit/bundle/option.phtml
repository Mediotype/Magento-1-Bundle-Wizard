<?php
/** @var $this Mediotype_BundleWizard_Block_Bundle_Adminhtml_Catalog_Product_Edit_Tab_Bundle_Option */
?>
<script type="text/javascript">
    optionTemplate = '<div id="<?php echo $this->getFieldId() ?>_{{index}}"  class="option-box"> ' +
    '<?php echo $this->jsQuoteEscape($this->getOptionDeleteButtonHtml()) ?>' +
    '<div class="option-title">' +
    '<label for="<?php echo $this->getFieldName() ?>[{{index}}][configurable_attribute_id]"><?php echo Mage::helper('bundle')->__('Configurable Attribute') ?></label>' +
    '<?php echo $this->getAttributeListHtml(); ?>' +
    '</div>' +
    '<div class="config-option option-title">' +
    '<label for="<?php echo $this->getFieldName() ?>[{{index}}][config_title]"><?php echo Mage::helper('bundle')->__('Configurable Step Title') ?></label>' +
    <?php if ($this->isDefaultStore()): ?>
    '<input class="input-text" type="text" name="<?php echo $this->getFieldName() ?>[{{index}}][config_title]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_config_title" value="{{config_title}}">' +
    <?php else: ?>
    '<input class="input-text" type="text" name="<?php echo $this->getFieldName() ?>[{{index}}][default_config_title]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_default_config_title" value="{{default_config_title}}">' +
    <?php endif; ?>
    '</div>' +
    '<div class="config-option option-title">' +
    '<label for="<?php echo $this->getFieldName() ?>[{{index}}][config_description]"><?php echo Mage::helper('bundle')->__('Configurable Step Description') ?></label>' +
    <?php if ($this->isDefaultStore()): ?>
    '<textarea name="<?php echo $this->getFieldName() ?>[{{index}}][config_description]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_config_description" class="textarea" rows="10" cols="100">{{config_description}}</textarea>' +
    <?php else: ?>
    '<textarea name="<?php echo $this->getFieldName() ?>[{{index}}][default_config_description]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_default_config_description" class="textarea" rows="2" cols="15">{{default_config_description}}</textarea>' +
    <?php endif; ?>
    '</div>' +
    '<div class="option-title"> ' +
    '<label for="<?php echo $this->getFieldName() ?>[{{index}}][title]"><?php echo Mage::helper('bundle')->__('Default Step Title') ?> <span class="required">*</span></label>' +
    <?php if ($this->isDefaultStore()): ?>
    '<input class="input-text required-entry" type="text" name="<?php echo $this->getFieldName() ?>[{{index}}][title]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_title" value="{{title}}">' +
    <?php else: ?>
    '<input class="input-text required-entry" type="text" name="<?php echo $this->getFieldName() ?>[{{index}}][default_title]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_default_title" value="{{default_title}}">' +
    <?php endif; ?>
    '</div>' +
    '<div class="option-title" style="padding-top:10px"> ' +
    '<label for="<?php echo $this->getFieldName() ?>[{{index}}][description]"><?php echo Mage::helper('bundle')->__('Default Step Description') ?> <span class="required">*</span></label>' +
    <?php if ($this->isDefaultStore()): ?>
    '<textarea name="<?php echo $this->getFieldName() ?>[{{index}}][description]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_description" class=" required-entry required-entry textarea" rows="10" cols="100">{{description}}</textarea>' +
    <?php else: ?>
    '<textarea name="<?php echo $this->getFieldName() ?>[{{index}}][default_description]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_default_description" class=" required-entry required-entry textarea" rows="2" cols="15">{{default_description}}</textarea>' +
    <?php endif; ?>

    '</div>' +
    '<table class="option-header" cellpadding="0" cellspacing="0">' +
    '<thead>' +
    '<tr>' +
    <?php if (!$this->isDefaultStore()): ?>
    '<th class="opt-title"><?php echo Mage::helper('bundle')->__('Store View Title') ?>  <span class="required">*</span></th>' +
    <?php endif; ?>
    '<th class="opt-type"><?php echo Mage::helper('bundle')->__('Input Type') ?></th>' +
    '<th class="opt-text-attribute"><?php echo Mage::helper('bundle')->__('Text Attribute') ?></th>' +
    '<th class="opt-autoadd-target"><?php echo Mage::helper('bundle')->__('Target Option') ?></th>' +
    '<th class="opt-req"><?php echo $this->jsQuoteEscape(Mage::helper('bundle')->__('Is Required')) ?></th>' +
    '<th class="opt-order"><?php echo Mage::helper('bundle')->__('Position') ?></th>' +
    '<th>&nbsp;</th>' +
    '</tr>' +
    '</thead>' +
    '<tbody>' +
    '<tr>' +
    '<input type="hidden" id="<?php echo $this->getFieldId() ?>_id_{{index}}" name="<?php echo $this->getFieldName() ?>[{{index}}][option_id]" value="{{option_id}}">' +
    '<input type="hidden" name="<?php echo $this->getFieldName() ?>[{{index}}][delete]" value="" class="delete">' +
    <?php if (!$this->isDefaultStore()): ?>
    '<td><input class="input-text required-entry" type="text" name="<?php echo $this->getFieldName() ?>[{{index}}][title]" id="id_<?php echo $this->getFieldName() ?>_{{index}}_title_store" value="{{title}}"></td>' +
    <?php endif; ?>
    '<td><?php echo $this->getTypeSelectHtml() ?></td>' +
    '<td width="100px" class="opt-text-attribute"><?php echo $this->getTextboxAttributeListHtml(); ?></td>' +
    '<td width="100px" class="opt-autoadd-target"><?php echo $this->getTargetOptionsListHtml(); ?></td>' +
    '<td><?php echo $this->getRequireSelectHtml() ?></td>' +
    '<td><input class="input-text validate-zero-or-greater" type="text" name="<?php echo $this->getFieldName() ?>[{{index}}][position]" value="{{position}}"></td>' +
    '<td>&nbsp;<?php echo $this->jsQuoteEscape($this->getAddSelectionButtonHtml()) ?></td>' +
    '</tr>' +
    '</tbody>' +
    '</table>' +
    '<div id="<?php echo $this->getFieldId() ?>_search_{{index}}">' +
    '</div>' +
    '</div>';
</script>

<?php echo $this->getSelectionHtml() ?>

<script type="text/javascript">

    function changeInputType(oldObject, oType) {
        var newObject = document.createElement('input');
        newObject.type = oType;
        if (oldObject.size) newObject.size = oldObject.size;
        if (oldObject.value) newObject.value = oldObject.value;
        if (oldObject.name) newObject.name = oldObject.name;
        if (oldObject.id) newObject.id = oldObject.id;
        if (oldObject.onclick) newObject.onclick = oldObject.onclick;
        if (oldObject.className) newObject.className = oldObject.className;
        oldObject.parentNode.replaceChild(newObject, oldObject);
        return newObject;
    }

    Bundle.Option = Class.create();
    Bundle.Option.prototype = {
        idLabel: '<?php echo $this->getFieldId() ?>',
        top: '',
        templateSyntax: /(^|.|\r|\n)({{(\w+)}})/,
        templateText: '',
        itemsCount: 0,
        initialize: function (template) {
            this.templateText = template;
            this.top = $('product_bundle_container_top');
        },

        add: function (data) {
            if (!data) {
                data = {};
                this.top = $('product_bundle_container_top');
            } else {
                data.title = data.title.replace('"', "&quot;");
            }

            data.index = this.itemsCount++;

            this.template = new Template(this.templateText, this.templateSyntax);

            Element.insert(this.top, {'after': this.template.evaluate(data)});

            this.top = $(this.idLabel + '_' + data.index);

            //set autoadd_target_option id
            if (data.autoadd_target_option) {
                var that = this;
                $A($(this.idLabel + '_' + data.index + '_autoadd_target_option').options).each(function (option) {
                    if (option.value == data.autoadd_target_option) {
                        option.selected = true;
                        if (option.value == "textbox") {
                            bOption.showTextboxAttributeList(that.idLabel + '_' + data.index);
                        } else {
                            bOption.hideTextboxAttributeList(that.idLabel + '_' + data.index);
                        }

                    }

                });

            }

            //set selected textbox attribute id
            if (data.textbox_attribute_id) {
                var that = this;
                $A($(this.idLabel + '_' + data.index + '_textbox_attribute_id').options).each(function (option) {
                    if (option.value == data.textbox_attribute_id) {
                        option.selected = true;
                        if (option.value == "textbox") {
                            bOption.showTextboxAttributeList(that.idLabel + '_' + data.index);
                        } else {
                            bOption.hideTextboxAttributeList(that.idLabel + '_' + data.index);
                        }

                    }

                });

            }

            //set selected configurable attribute id
            if (data.configurable_attribute_id) {
                $A($(this.idLabel + '_' + data.index + '_configurable_attribute_id').options).each(function (option) {
                    if (option.value == data.configurable_attribute_id) option.selected = true;
                });
                if ($(this.idLabel + '_' + data.index + '_configurable_attribute_id').selectedIndex == 0) {
                    this.hideConfigOptions(this.idLabel + '_' + data.index);
                }
            }


            //set selected type
            if (data.type) {
                that = this;
                $A($(this.idLabel + '_' + data.index + '_type').options).each(function (option) {
                    if (option.value == data.type) {
                        option.selected = true;

                        var textAttributeElements = $(that.idLabel + "_" + data.index).select('.opt-text-attribute');


                        // HIDE OR SHOW TEXT MAP OPTIONS
                        if (option.value == "textbox") {
                            textAttributeElements.each(function (elm, index) {
                                $(elm).removeClassName('no-display');
                            });
                        } else {
                            textAttributeElements.each(function (elm, index) {
                                $(elm).addClassName('no-display');
                            });
                        }


                        var autoAddElements = $(that.idLabel + "_" + data.index).select('.opt-autoadd-target');
                        // HIDE OR SHOW AUTO ADD OPTIONS
                        if (option.value == "autoadd") {
                            autoAddElements.each(function (elm, index) {
                                $(elm).removeClassName('no-display');
                            });
                        } else {
                            autoAddElements.each(function (elm, index) {
                                $(elm).addClassName('no-display');
                            });
                        }



                    }
                });
            }

            //set selected is_require
            if (data.required) {
                $A($(this.idLabel + '_' + data.index + '_required').options).each(function (option) {
                    if (option.value == data.required) option.selected = true;
                });
            }
            // rebind change notifications
            varienWindowOnload(true);

            return data.index;
        },

        remove: function (event) {
            var element = $(Event.findElement(event, 'div')).parentNode;
            if (element) {
                Element.select(element, '.delete').each(function (elem) {
                    elem.value = '1'
                });
                Element.select(element, ['input', 'select']).each(function (elem) {
                    elem.hide();
                    elem.className = '';
                });
                Element.hide(element);
            }
        },

        changeType: function (event) {
            var element = Event.element(event);
            parts = element.id.split('_');
            i = parts[2];

            if (element.value == "textbox") {
                bOption.showTextboxAttributeList(bSelection.idLabel + "_" + i);
            } else {
                bOption.hideTextboxAttributeList(bSelection.idLabel + "_" + i);
            }

            var autoAddElements = $(bSelection.idLabel + "_" + i).select('.opt-autoadd-target');
            // HIDE OR SHOW AUTO ADD OPTIONS
            if (option.value == "autoadd") {
                autoAddElements.each(function (elm, index) {
                    $(elm).removeClassName('no-display');
                });
            } else {
                autoAddElements.each(function (elm, index) {
                    $(elm).addClassName('no-display');
                });
            }


            if (element.value == 'multi' || element.value == 'checkbox') {
                inputs = $A($$('#' + bSelection.idLabel + '_box_' + i + ' tr.selection input.default'));
                inputs.each(
                    function (elem) {
                        //elem.type = "checkbox";
                        changeInputType(elem, 'checkbox');
                    }
                );
                /**
                 * Hide not needed elements (user defined qty select box)
                 */
                inputs = $A($$('#' + bSelection.idLabel + '_box_' + i + ' .qty-box'));
                inputs.each(
                    function (elem) {
                        elem.hide();
                    }
                );

            } else {
                inputs = $A($$('#' + bSelection.idLabel + '_box_' + i + ' tr.selection input.default'));
                have = false;
                for (j = 0; j < inputs.length; j++) {
                    //inputs[j].type = "radio";
                    changeInputType(inputs[j], 'radio');
                    if (inputs[j].checked && have) {
                        inputs[j].checked = false;
                    } else {
                        have = true;
                    }
                }

                /**
                 * Show user defined select box
                 */
                inputs = $A($$('#' + bSelection.idLabel + '_box_' + i + ' .qty-box'));
                inputs.each(
                    function (elem) {
                        elem.show();
                    }
                );
            }
        },

        changeConfigurableAttribute: function (event, optionId) {
            if (event.target.selectedIndex == 0) {
                this.hideConfigOptions(this.idLabel + "_" + optionId);
            } else {
                this.showConfigOptions(this.idLabel + "_" + optionId);
            }
        },

        showConfigOptions: function (optionBoxId) {
            $(optionBoxId).select('.config-option').each(function (elm, index) {
                $(elm).removeClassName('no-display');
            });
        },

        hideConfigOptions: function (optionBoxId) {
            $(optionBoxId).select('.config-option').each(function (elm, index) {
                $(elm).addClassName('no-display');
            });
        },

        showTextboxAttributeList: function (optionBoxId) {
            var textAttributeElements = $(optionBoxId).select('.opt-text-attribute');
            textAttributeElements.each(function (elm, index) {
                $(elm).removeClassName('no-display');
            });
        },

        hideTextboxAttributeList: function (optionBoxId) {
            var textAttributeElements = $(optionBoxId).select('.opt-text-attribute');
            textAttributeElements.each(function (elm, index) {
                $(elm).addClassName('no-display');
            });
        },

        priceTypeFixed: function () {
            inputs = $A($$('.price-type-box'));
            inputs.each(
                function (elem) {
                    elem.show();
                }
            );
        },

        priceTypeDynamic: function () {
            inputs = $A($$('.price-type-box'));
            inputs.each(
                function (elem) {
                    elem.hide();
                }
            );
        }
    };

    var optionIndex = 0;
    bOption = new Bundle.Option(optionTemplate);
    //adding data to templates
    <?php foreach ($this->getOptions() as $_option): ?>
    optionIndex = bOption.add(<?php echo $_option->toJson() ?>);
    <?php if ($_option->getSelections()):?>
    <?php foreach ($_option->getSelections() as $_selection): ?>
    <?php $_selection->setName($this->escapeHtml($_selection->getName())); ?>
    bSelection.addRow(optionIndex, <?php echo $_selection->toJson() ?>);
    <?php endforeach; ?>
    <?php endif; ?>
    <?php endforeach; ?>
    /**
     * Adding event on price type select box of product to hide or show prices for selections
     */
    function togglePriceType() {
        if ($('price_type').value == '1') {
            bOption.priceTypeFixed();
        } else {
            bOption.priceTypeDynamic();
        }
    }

    togglePriceType();

    Event.observe('price_type', 'change', togglePriceType);

</script>